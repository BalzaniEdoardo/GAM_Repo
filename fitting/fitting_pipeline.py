import os,inspect,sys,re
print (inspect.getfile(inspect.currentframe()))
thisPath = os.path.dirname(inspect.getfile(inspect.currentframe()))

if os.path.exists('/scratch/jpn5/GAM_Repo/GAM_library/'):
    sys.path.append('/scratch/jpn5/GAM_Repo/GAM_library/')
    sys.path.append('/scratch/jpn5/GAM_Repo/preprocessing_pipeline/util_preproc')
    sys.path.append('/scratch/jpn5/GAM_Repo/firefly_utils/')
else:
    sys.path.append(os.path.join(os.path.dirname(thisPath),'GAM_library'))
    sys.path.append(os.path.join(os.path.dirname(thisPath),'preprocessing_pipeline/util_preproc'))
    sys.path.append(os.path.join(os.path.dirname(thisPath),'firefly_utils'))

from GAM_library import *
from data_handler import *
from gam_data_handlers import *
import numpy as np
import scipy.stats as sts
from copy import deepcopy
from knots_constructor import *
from path_class import get_paths_class
from scipy.io import loadmat
from utils_loading import unpack_preproc_data
import dill


session = ''

create_npz = True
fit = True

path_mat = ''
path_npz = ''

path_save_npz = ''

if create_npz:
    # keys in the mat file generated by the preprocessing script of  K.
    behav_stat_key = 'behv_stats'
    spike_key = 'units'
    behav_dat_key = 'trials_behv'
    lfp_key = 'lfps'

    # presence rate params
    occupancy_bin_sec = 60  # at least one spike per min
    occupancy_rate_th = 0.1  # hz

    linearprobe_sampling_fq = 20000
    utah_array_sampling_fq = 30000

    phase_precomputed = []
    cnt_concat = 0







